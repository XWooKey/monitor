<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guyu.ssm1.role.mapper.RoleMapper">
	<sql id="roleAttributes">
		id,
		name,
		description,
	</sql>

	<resultMap id="roleMap" type="com.guyu.ssm1.role.model.RoleEntity">
		<id property="id" column="id" />
		<result property="name" column="name" />
		<result property="description" column="r_description" />
		<collection property="userList" column="id"
			ofType="com.guyu.ssm1.user.model.UserEntity">
			<id property="id" column="id" />
			<result property="username" column="username" />
			<result property="password" column="password" />
			<result property="sex" column="sex" />
			<result property="birthday" column="birthday" />
			<result property="telephone" column="telephone" />
			<result property="email" column="email" />
			<result property="createtime" column="createtime" />
			<result property="updatetime" column="updatetime" />
		</collection>
	</resultMap>

	<select id="queryListByPage" parameterType="map" resultMap="roleMap"
		flushCache="true" useCache="true">
		<!-- 偏移offset较小的时候，直接使用limit较优； 偏移offset较大的时候，使用下面子查询的方式较优； 具体可以根据业务情况选择 -->
		<!-- select <include refid="userAttributes" /> from tb_user Where u_id 
			>=( select u_id from tb_user order by u_id limit ${start},1 ) limit ${pageNumber} -->
		SELECT
		r.id,
		r.name,
		r.description,
		u.id,
		u.username,
		u.password,
		u.sex,
		u.birthday,
		u.telephone,
		u.email,
		u.createtime,
		u.updatetime
		FROM tb_role r
		LEFT JOIN
		tb_user_role ur ON ur.id = ur.id LEFT JOIN tb_user u ON ur.id
		=
		u.id
		<where>
			<if test="name != null and name != ''">
				r.name=#{name}
			</if>
		</where>
	</select>



	<select id="findByName" parameterType="String" resultMap="roleMap"
		flushCache="true" useCache="true">
		SELECT
		r.id,
		r.name,
		r.description,
		u.id,
		u.username,
		u.password,
		u.sex,
		u.birthday,
		u.telephone,
		u.email,
		u.createtime,
		u.updatetime
		FROM tb_role r
		LEFT JOIN
		tb_user_role ur ON ur.id = ur.id LEFT JOIN tb_user u ON ur.id
		=
		u.id
		<where>
			<if test="name != null and name != ''">
				r.name=#{name}
			</if>
		</where>
	</select>


	<insert id="insert" parameterType="com.guyu.ssm1.role.model.RoleEntity"
		useGeneratedKeys="true" keyProperty="id">
		insert ignore into tb_role (
		name,
		r_description
		)
		values (
		#{name},
		#{description}
		)
	</insert>


	<select id="findById" parameterType="long" resultMap="roleMap"
		flushCache="true" useCache="true">
		SELECT
		r.id,
		r.name,
		r.description,
		u.id,
		u.username,
		u.password,
		u.sex,
		u.birthday,
		u.telephone,
		u.email,
		u.createtime,
		u.updatetime
		FROM tb_role r
		LEFT JOIN
		tb_user_role ur ON ur.id = ur.id LEFT JOIN tb_user u ON ur.id
		=
		u.id
		<where>
			<if test="id != null">
				r.id=#{id}
			</if>
		</where>
	</select>

	<update id="update" parameterType="com.guyu.ssm1.role.model.RoleEntity"
		flushCache="true">
		update tb_role
		<set>
			<if test="name != null and name != ''">
				name = #{name},
			</if>
			<if test="description != null and description != ''">
				description = #{description}
			</if>
		</set>
		where id = #{id}
	</update>


	<!-- -->

	<delete id="deleteBatchById" parameterType="list">
		delete from tb_role where id in
		<foreach collection="list" item="id" open="(" separator=","
			close=")">
			#{id}
		</foreach>
	</delete>

	<delete id="deleteById" parameterType="int">
		delete from tb_role where id = #{id}
	</delete>

	<delete id="deleteRoleResource" parameterType="int">
		delete from tb_role_resources where id = #{id}
	</delete>

	<select id="findRoleUserById" parameterType="int" resultType="int"
		flushCache="true" useCache="true">
		SELECT count(*)
		FROM tb_user_role
		where id =
		#{id}
	</select>

	<select id="findRoleResourceById" parameterType="int"
		resultType="int" flushCache="true" useCache="true">
		SELECT count(*)
		FROM
		tb_role_resources
		where id = ${id}
	</select>

	<insert id="addRoleResourceBatch" parameterType="map">
		insert ignore into tb_role_resources (
		resource_id,
		role_id,
		)
		values
		<foreach collection="resourceIds" item="id" separator=",">
			(
			#{role_id},
			#{user_id}
			)
		</foreach>
	</insert>

	<insert id="addRoleResource" parameterType="map">
		insert ignore into
		tb_role_resources (
		resource_id,
		role_id,
			)
		values
		(
		#{resource_id},
		#{role_id},
		now()
		)
	</insert>

</mapper>